# Generated by notebook-2-app @ 2024-06-24 22:34:32.976982
# Based on notebook /Workspace/Users/ben.mullan@ ((redacted)) .co.uk/notebook-2-app-res/n2a-workspace-file-demo

import pandas, plotly.express

# Make API request to get sensitive-data...
api_key = "dbapi_938c2cc0dcc05f2b68c4287040cfcf71"

import io, os, urllib, json;

class secrets:
    # Put the secrets in a separate .env file, and read 'em in...
    DATABRICKS_HOST            = lambda : 'DATABRICKS_HOST';
    DATABRICKS_ACCESS_TOKEN    = lambda : 'DATABRICKS_ACCESS_TOKEN';


def get_workspace_file_contents(_workspace_file_path):
    '''
        Downloads the raw text file contents,
        from the databricks' workspace file-system.
    
        Eg: get_workspace_file_contents('/Workspace/misc/x-y-series.csv')
    '''
    
    return make_databricks_api_request(
        '/api/2.0/workspace/export',
        json.dumps({ 'path' : _workspace_file_path, 'format' : 'SOURCE', 'direct_download' : 'true' })
    );


def make_databricks_api_request(_api_path, _post_data) -> str:
    '''
        Authenticates and returns the string response
        from the Databricks' API at _api_path.
    '''

    try:

        _url = f'https://{ secrets.DATABRICKS_HOST() }{_api_path}';

        _request = urllib.request.Request(
            method  = 'GET',
            url     = _url,
            data    = _post_data.encode('utf-8')
        );
        
        _request.add_header('Authorization', f'Bearer { secrets.DATABRICKS_ACCESS_TOKEN() }');
        
        _response = urllib.request.urlopen(_request);
        return _response.read().decode('utf-8');
        
    except Exception as _request_exception:
        raise Exception(f'The Databricks API Request failed, with error [{str(_request_exception)}]. URL: {_url}');


# TODO: Specify correct DATABRICKS_ACCESS_TOKEN in .env file, for above `secrets` class
# Generate access token: https://learn.microsoft.com/en-us/azure/databricks/dev-tools/auth/pat#--azure-databricks-personal-access-tokens-for-workspace-users

po2_dataframe  = pandas.read_csv(
    io.StringIO( get_workspace_file_contents('/Workspace/Users/ben.mullan@ ((redacted)) .co.uk/powers-of-two.csv') ),
    sep = ','
);


po2_line = plotly.express.line(po2_dataframe, x="x", y="y")

# Replaced <figure>.show() with Dash Server.
# âš  Have only one Dash server per application.

import dash;
app = dash.Dash(__name__);

app.layout = dash.html.Div(
    [
        dash.dcc.Markdown('**Application Title Here**'),
        dash.dcc.Graph(figure=po2_line)
    ]
);

if __name__ == '__main__': app.run(debug=False);

